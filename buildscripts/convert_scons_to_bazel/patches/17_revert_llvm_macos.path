diff --git a/.bazelrc b/.bazelrc
index 0b38d33b898..3baa1d4e0c9 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -60,6 +60,8 @@ common --experimental_remote_downloader_local_fallback
 # not filtered due to their size, timeout, tag, or language.
 test --build_tests_only
 
+common:macos --repo_env=BAZEL_NO_APPLE_CPP_TOOLCHAIN=1
+
 # Pin down the OSS LLVM Clang version for MacOS builds.
 common:macos --repo_env=LLVM_VERSION=19
 
@@ -137,6 +139,7 @@ common --flag_alias=include_autogenerated_targets=//bazel/config:include_autogen
 common --flag_alias=bolt=//bazel/config:bolt
 common --flag_alias=dwarf_version=//bazel/config:dwarf_version
 common --flag_alias=http_client=//bazel/config:http_client
+common --flag_alias=developer_dir=//bazel/config:developer_dir
 common --flag_alias=asan=//bazel/config:asan
 common --flag_alias=fsan=//bazel/config:fsan
 common --flag_alias=msan=//bazel/config:msan
@@ -147,6 +150,7 @@ common --flag_alias=dbg_level=//bazel/config:dbg_level
 common --flag_alias=mongo_toolchain_version=//bazel/config:mongo_toolchain_version
 common --flag_alias=simple_build_id=//bazel/config:simple_build_id
 common --flag_alias=create_dwp=//bazel/config:create_dwp
+common --flag_alias=use_apple_clang=//bazel/config:apple_clang
 common --flag_alias=win_min_version=//bazel/config:win_min_version
 
 #############################################################################################################################
@@ -485,6 +489,9 @@ try-import %workspace%/.bazelrc.evergreen_engflow_creds
 # Evergreen settings, ex. in evergreen this will set the key/cert options for access to the cluster
 try-import %workspace%/.bazelrc.evergreen
 
+# Import settings for selecting the right xcode version on mac
+try-import %workspace%/.bazelrc.xcode
+
 # local default dev settings
 try-import %workspace%/.bazelrc.common_bes
 
diff --git a/MODULE.bazel b/MODULE.bazel
index 082db8d525a..2846382c948 100644
--- a/MODULE.bazel
+++ b/MODULE.bazel
@@ -169,8 +169,17 @@ register_execution_platforms("@internal_platforms_do_not_use//host:host")
 ##    "mongo_toolchain_v5",
 ##)
 #
-setup_mongo_apple_toolchains_extension = use_extension("//bazel/toolchains/cc/mongo_apple:mongo_apple_toolchain.bzl", "setup_mongo_apple_toolchain_extension")
-use_repo(setup_mongo_apple_toolchains_extension, "mongo_apple_toolchain")
+mongo_apple_toolchain_config = use_repo_rule("//bazel/toolchains/cc/mongo_apple:mongo_apple_toolchain.bzl", "mongo_apple_toolchain_config")
+
+mongo_apple_toolchain_config(name = "mongo_apple_toolchain_config")
+
+mongo_apple_toolchain_setup = use_repo_rule("//bazel/toolchains/cc/mongo_apple:mongo_apple_toolchain.bzl", "mongo_apple_toolchain_setup")
+
+mongo_apple_toolchain_setup(name = "mongo_apple_toolchain")
+
+mongo_apple_brew_llvm_toolchain_config = use_repo_rule("//bazel/toolchains/cc/mongo_apple:mongo_apple_toolchain.bzl", "mongo_apple_brew_llvm_toolchain_config")
+
+mongo_apple_brew_llvm_toolchain_config(name = "mongo_apple_brew_llvm_toolchain_config")
 
 register_toolchains(
     "@mongo_apple_toolchain//...",
diff --git a/bazel/config/BUILD.bazel b/bazel/config/BUILD.bazel
index 54d5f2dd45b..ea45f7bbcb7 100644
--- a/bazel/config/BUILD.bazel
+++ b/bazel/config/BUILD.bazel
@@ -18,6 +18,7 @@ load(
     "dbg_level",
     "debug_symbols",
     "detect_odr_violations",
+    "developer_dir",
     "disable_streams",
     "disable_warnings_as_errors",
     "dwarf_version",
@@ -96,6 +97,18 @@ config_setting(
     },
 )
 
+bool_flag(
+    name = "apple_clang",
+    build_setting_default = False,
+)
+
+config_setting(
+    name = "use_apple_clang",
+    flag_values = {
+        ":apple_clang": "true",
+    },
+)
+
 selects.config_setting_group(
     name = "gcc_or_clang",
     match_any = [
@@ -2352,6 +2365,15 @@ selects.config_setting_group(
     ],
 )
 
+# --------------------------------------
+# developer dir
+# --------------------------------------
+
+developer_dir(
+    name = "developer_dir",
+    build_setting_default = "/Applications/Xcode.app",
+)
+
 # --------------------------------------
 # sdkroot
 # --------------------------------------
diff --git a/bazel/config/configs.bzl b/bazel/config/configs.bzl
index ed60d8079af..6b4c056ac91 100644
--- a/bazel/config/configs.bzl
+++ b/bazel/config/configs.bzl
@@ -652,6 +652,20 @@ pgo_profile = rule(
     build_setting = config.bool(flag = True),
 )
 
+# =============
+# xcode developer dir
+# =============
+
+developer_dir_provider = provider(
+    doc = "The path for which xcode sdk to use, e.g. DEVELOPER_DIR=/Applications/Xcode13.app",
+    fields = {"path": "Path to developer dir.]"},
+)
+
+developer_dir = rule(
+    implementation = lambda ctx: developer_dir_provider(path = ctx.build_setting_value),
+    build_setting = config.string(flag = True),
+)
+
 # =============
 # sdkroot
 # =============
diff --git a/bazel/config/generate_config_header.bzl b/bazel/config/generate_config_header.bzl
index f37c0c6d531..c582a98b166 100644
--- a/bazel/config/generate_config_header.bzl
+++ b/bazel/config/generate_config_header.bzl
@@ -1,6 +1,6 @@
 load("@bazel_tools//tools/cpp:toolchain_utils.bzl", "find_cpp_toolchain")
 load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
-load("//bazel/config:configs.bzl", "sdkroot_provider")
+load("//bazel/config:configs.bzl", "developer_dir_provider", "sdkroot_provider")
 load("//bazel:mongo_src_rules.bzl", "write_target")
 
 def generate_config_header_impl(ctx):
@@ -92,7 +92,7 @@ def generate_config_header_impl(ctx):
                         "--compiler-args",
                         " ".join(compiler_flags),
                         "--env-vars",
-                        json.encode(env_flags | {"SDKROOT": ctx.attr._sdkroot[sdkroot_provider].path}),
+                        json.encode(env_flags | {"DEVELOPER_DIR": ctx.attr._developer_dir[developer_dir_provider].path, "SDKROOT": ctx.attr._sdkroot[sdkroot_provider].path}),
                     ],
     )
 
@@ -140,6 +140,7 @@ generate_config_header_rule = rule(
             allow_single_file = True,
         ),
         "_cc_toolchain": attr.label(default = "@bazel_tools//tools/cpp:current_cc_toolchain"),
+        "_developer_dir": attr.label(default = "//bazel/config:developer_dir"),
         "_sdkroot": attr.label(default = "//bazel/config:sdkroot"),
     },
     fragments = ["cpp"],
diff --git a/bazel/toolchains/cc/mongo_apple/BUILD.tpl b/bazel/toolchains/cc/mongo_apple/BUILD.tpl
new file mode 100644
index 00000000000..8724f183677
--- /dev/null
+++ b/bazel/toolchains/cc/mongo_apple/BUILD.tpl
@@ -0,0 +1,122 @@
+###
+# This file was retrieved from the following location:
+#    https://github.com/bazelbuild/apple_support/blob/2241caed4182e22071647b079c632004699a34e9/crosstool/BUILD.tpl 
+###
+
+package(default_visibility = ["//visibility:public"])
+
+load("@build_bazel_apple_support//configs:platforms.bzl", "APPLE_PLATFORMS_CONSTRAINTS")
+load(":cc_toolchain_config.bzl", "cc_toolchain_config")
+###
+# mongo customization
+load(
+    "@//bazel/toolchains/cc:mongo_custom_features.bzl",
+    "COMPILERS",
+    "FEATURES_ATTR_NAMES",
+    "get_common_features_attrs")
+###
+
+_APPLE_ARCHS = APPLE_PLATFORMS_CONSTRAINTS.keys()
+
+CC_TOOLCHAINS = [(
+    cpu + "|clang",
+    ":cc-compiler-" + cpu,
+) for cpu in _APPLE_ARCHS] + [(
+    cpu,
+    ":cc-compiler-" + cpu,
+) for cpu in _APPLE_ARCHS] + [
+    ("k8|clang", ":cc-compiler-darwin_x86_64"),
+    ("darwin|clang", ":cc-compiler-darwin_x86_64"),
+    ("k8", ":cc-compiler-darwin_x86_64"),
+    ("darwin", ":cc-compiler-darwin_x86_64"),
+]
+
+cc_library(
+    name = "link_extra_lib",
+)
+
+cc_library(
+    name = "malloc",
+)
+
+filegroup(
+    name = "empty",
+    srcs = [],
+)
+
+filegroup(
+    name = "cc_wrapper",
+    srcs = ["cc_wrapper.sh"],
+)
+
+cc_toolchain_suite(
+    name = "toolchain",
+    toolchains = dict(CC_TOOLCHAINS),
+)
+
+filegroup(
+    name = "modulemap",
+    srcs = [
+%{layering_check_modulemap}
+    ],
+)
+
+filegroup(
+    name = "tools",
+    srcs = [
+        ":cc_wrapper",
+        ":libtool",
+        ":libtool_check_unique",
+        ":make_hashed_objlist.py",
+        ":modulemap",
+        ":wrapped_clang",
+        ":wrapped_clang_pp",
+        ":xcrunwrapper.sh",
+    ],
+)
+
+[
+    cc_toolchain(
+        name = "cc-compiler-" + arch,
+        all_files = ":tools",
+        ar_files = ":tools",
+        as_files = ":tools",
+        compiler_files = ":tools",
+        dwp_files = ":empty",
+        linker_files = ":tools",
+        objcopy_files = ":empty",
+        strip_files = ":tools",
+        supports_header_parsing = 1,
+        supports_param_files = 1,
+        toolchain_config = arch,
+        toolchain_identifier = arch,
+        module_map = %{placeholder_modulemap},
+    )
+    for arch in _APPLE_ARCHS
+]
+
+###
+# mongo customization
+feature_attrs = get_common_features_attrs()
+###
+
+[
+    cc_toolchain_config(
+        name = arch,
+        cpu = arch,
+        features = [
+%{features}
+        ],
+        cxx_builtin_include_directories = [
+%{cxx_builtin_include_directories}
+        ],
+        tool_paths_overrides = {%{tool_paths_overrides}},
+        module_map = ":modulemap",
+###
+# mongo customization
+        compiler = COMPILERS.CLANG,
+        optimization_level = feature_attrs[FEATURES_ATTR_NAMES.OPT_LEVEL],
+###
+    )
+    for arch in _APPLE_ARCHS
+]
diff --git a/bazel/toolchains/cc/mongo_apple/BUILD.tmpl b/bazel/toolchains/cc/mongo_apple/BUILD_llvm.tpl
similarity index 83%
rename from bazel/toolchains/cc/mongo_apple/BUILD.tmpl
rename to bazel/toolchains/cc/mongo_apple/BUILD_llvm.tpl
index 8fe1f51c7b9..c673c3a7fe0 100644
--- a/bazel/toolchains/cc/mongo_apple/BUILD.tmpl
+++ b/bazel/toolchains/cc/mongo_apple/BUILD_llvm.tpl
@@ -67,20 +67,3 @@ feature_attrs = get_common_features_attrs()
     )
     for arch, cpu in get_supported_apple_archs().items()
 ]
-
-[
-    toolchain(
-        name = "mongo_apple_" + arch + "_toolchain",
-        exec_compatible_with = [
-            "@platforms//os:macos",
-            "@platforms//cpu:" + cpu,
-        ],
-        target_compatible_with = [
-            "@platforms//os:macos",
-            "@platforms//cpu:" + cpu,
-        ],
-        toolchain = "@mongo_apple_toolchain//:cc-compiler-" + arch,
-        toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-    )
-    for arch, cpu in get_supported_apple_archs().items()
-]
diff --git a/bazel/toolchains/cc/mongo_apple/mongo_apple_cc_toolchain_config.bzl b/bazel/toolchains/cc/mongo_apple/mongo_apple_cc_toolchain_config.bzl
new file mode 100644
index 00000000000..8b31e5b60d9
--- /dev/null
+++ b/bazel/toolchains/cc/mongo_apple/mongo_apple_cc_toolchain_config.bzl
@@ -0,0 +1,2798 @@
+# Copyright 2019 The Bazel Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""A C++ toolchain configuration rule for macOS."""
+
+load("@bazel_features//:features.bzl", "bazel_features")
+load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
+load(
+    "@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl",
+    "action_config",
+    "artifact_name_pattern",
+    "env_entry",
+    "env_set",
+    "feature",
+    "feature_set",
+    "flag_group",
+    "flag_set",
+    "make_variable",
+    "tool",
+    "tool_path",
+    "variable_with_value",
+    "with_feature_set",
+)
+load("@build_bazel_apple_support//lib:apple_support.bzl", "apple_support")
+
+###
+# mongodb customization
+load("@//bazel/toolchains/cc/mongo_apple:mongo_custom_features.bzl", "get_apple_features")
+###
+
+# TODO: Remove when we drop bazel 6.x support
+_OBJC_ARCHIVE_ACTION_NAME = "objc-archive"
+_OBJCPP_EXECUTABLE_ACTION_NAME = "objc++-executable"
+
+_DYNAMIC_LINK_ACTIONS = [
+    ACTION_NAMES.cpp_link_dynamic_library,
+    ACTION_NAMES.cpp_link_executable,
+    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+    ACTION_NAMES.objc_executable,
+    _OBJCPP_EXECUTABLE_ACTION_NAME,
+]
+
+all_c_compile_actions = [
+    ACTION_NAMES.c_compile,
+    ACTION_NAMES.assemble,
+    ACTION_NAMES.preprocess_assemble,
+]
+
+def _sdk_version_for_platform(xcode_config, platform_type):
+    if platform_type == apple_common.platform_type.ios:
+        return xcode_config.sdk_version_for_platform(apple_common.platform.ios_device)
+    elif platform_type == apple_common.platform_type.tvos:
+        return xcode_config.sdk_version_for_platform(apple_common.platform.tvos_device)
+    elif platform_type == getattr(apple_common.platform_type, "visionos", None):
+        return xcode_config.sdk_version_for_platform(apple_common.platform.visionos_device)
+    elif platform_type == apple_common.platform_type.watchos:
+        return xcode_config.sdk_version_for_platform(apple_common.platform.watchos_device)
+    elif platform_type == apple_common.platform_type.macos:
+        return xcode_config.sdk_version_for_platform(apple_common.platform.macos)
+    else:
+        fail("Unhandled platform type: {}".format(platform_type))
+
+def _sdk_name(platform_type, is_simulator):
+    if platform_type == apple_common.platform_type.ios and is_simulator:
+        return "iPhoneSimulator"
+    elif platform_type == apple_common.platform_type.ios:
+        return "iPhoneOS"
+    elif platform_type == getattr(apple_common.platform_type, "visionos", None) and is_simulator:
+        return "XRSimulator"
+    elif platform_type == getattr(apple_common.platform_type, "visionos", None):
+        return "XROS"
+    elif platform_type == apple_common.platform_type.watchos and is_simulator:
+        return "WatchSimulator"
+    elif platform_type == apple_common.platform_type.watchos:
+        return "WatchOS"
+    elif platform_type == apple_common.platform_type.tvos and is_simulator:
+        return "AppleTVSimulator"
+    elif platform_type == apple_common.platform_type.tvos:
+        return "AppleTVOS"
+    elif platform_type == apple_common.platform_type.macos:
+        return "MacOSX"
+    else:
+        fail("Unhandled platform type: {}".format(platform_type))
+
+def _impl(ctx):
+    if ctx.attr.cpu.startswith("darwin"):
+        platform_type = apple_common.platform_type.macos
+    elif ctx.attr.cpu.startswith("ios"):
+        platform_type = apple_common.platform_type.ios
+    elif ctx.attr.cpu.startswith("tvos"):
+        platform_type = apple_common.platform_type.tvos
+    elif ctx.attr.cpu.startswith("watchos"):
+        platform_type = apple_common.platform_type.watchos
+    elif ctx.attr.cpu.startswith("visionos"):
+        # TODO: Remove when we drop bazel 5.x support, falling back to iOS
+        # doesn't hurt since you can't build for visionOS in this case anyways
+        platform_type = getattr(apple_common.platform_type, "visionos", None) or apple_common.platform_type.ios
+    else:
+        fail("""\
+Unknown CPU: {cpu}. Please update 'apple_support' to the latest version. If \
+you are sure you are on the latest version, try 'bazel shutdown' to work \
+around a Bazel staleness bug. Finally, if you still encounter this error, \
+please file an issue at https://github.com/bazelbuild/apple_support/issues/new
+""".format(cpu = ctx.attr.cpu))
+
+    xcode_config = ctx.attr._xcode_config[apple_common.XcodeVersionConfig]
+    xcode_execution_requirements = xcode_config.execution_info().keys()
+    target_os_version = xcode_config.minimum_os_for_platform_type(platform_type)
+    sdk_version = _sdk_version_for_platform(xcode_config, platform_type)
+
+    is_simulator = False
+    if (ctx.attr.cpu == "ios_arm64"):
+        target_system_name = "arm64-apple-ios{}".format(target_os_version)
+    elif (ctx.attr.cpu == "tvos_arm64"):
+        target_system_name = "arm64-apple-tvos{}".format(target_os_version)
+    elif (ctx.attr.cpu == "visionos_arm64"):
+        target_system_name = "arm64-apple-xros{}".format(target_os_version)
+    elif (ctx.attr.cpu == "watchos_arm64_32"):
+        target_system_name = "arm64_32-apple-watchos{}".format(target_os_version)
+    elif (ctx.attr.cpu == "ios_arm64e"):
+        target_system_name = "arm64e-apple-ios{}".format(target_os_version)
+    elif (ctx.attr.cpu == "watchos_armv7k"):
+        target_system_name = "armv7k-apple-watchos{}".format(target_os_version)
+    elif (ctx.attr.cpu == "ios_x86_64"):
+        target_system_name = "x86_64-apple-ios{}-simulator".format(target_os_version)
+        is_simulator = True
+    elif (ctx.attr.cpu == "ios_sim_arm64"):
+        target_system_name = "arm64-apple-ios{}-simulator".format(target_os_version)
+        is_simulator = True
+    elif (ctx.attr.cpu == "tvos_sim_arm64"):
+        target_system_name = "arm64-apple-tvos{}-simulator".format(target_os_version)
+        is_simulator = True
+    elif (ctx.attr.cpu == "visionos_sim_arm64"):
+        target_system_name = "arm64-apple-xros{}-simulator".format(target_os_version)
+        is_simulator = True
+    elif (ctx.attr.cpu == "watchos_arm64"):
+        target_system_name = "arm64-apple-watchos{}-simulator".format(target_os_version)
+        is_simulator = True
+    elif (ctx.attr.cpu == "watchos_device_arm64"):
+        target_system_name = "arm64-apple-watchos{}".format(target_os_version)
+    elif (ctx.attr.cpu == "watchos_device_arm64e"):
+        target_system_name = "arm64e-apple-watchos{}".format(target_os_version)
+    elif (ctx.attr.cpu == "darwin_x86_64"):
+        target_system_name = "x86_64-apple-macosx{}".format(target_os_version)
+    elif (ctx.attr.cpu == "darwin_arm64"):
+        target_system_name = "arm64-apple-macosx{}".format(target_os_version)
+    elif (ctx.attr.cpu == "darwin_arm64e"):
+        target_system_name = "arm64e-apple-macosx{}".format(target_os_version)
+    elif (ctx.attr.cpu == "tvos_x86_64"):
+        target_system_name = "x86_64-apple-tvos{}-simulator".format(target_os_version)
+        is_simulator = True
+    elif (ctx.attr.cpu == "watchos_x86_64"):
+        target_system_name = "x86_64-apple-watchos{}-simulator".format(target_os_version)
+        is_simulator = True
+    else:
+        fail("""\
+Unknown CPU: {cpu}. Please update 'apple_support' to the latest version. If \
+you are sure you are on the latest version, try 'bazel shutdown' to work \
+around a Bazel staleness bug. Finally, if you still encounter this error, \
+please file an issue at https://github.com/bazelbuild/apple_support/issues/new
+""".format(cpu = ctx.attr.cpu))
+
+    if ctx.attr.cpu.startswith("darwin_"):
+        target_libc = "macosx"
+    else:
+        target_libc = ctx.attr.cpu.split("_")[0]
+
+    if ctx.attr.cpu == "darwin_x86_64":
+        abi_libc_version = "darwin_x86_64"
+        abi_version = "darwin_x86_64"
+    else:
+        abi_libc_version = "local"
+        abi_version = "local"
+
+    arch = ctx.attr.cpu.split("_", 1)[-1]
+    if ctx.attr.cpu in ["ios_sim_arm64", "tvos_sim_arm64", "visionos_sim_arm64", "watchos_arm64", "watchos_device_arm64"]:
+        arch = "arm64"
+    elif ctx.attr.cpu in ["watchos_device_arm64e"]:
+        arch = "arm64e"
+
+    all_link_actions = [
+        ACTION_NAMES.cpp_link_executable,
+        ACTION_NAMES.cpp_link_dynamic_library,
+        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+    ]
+
+    strip_action = action_config(
+        action_name = ACTION_NAMES.strip,
+        flag_sets = [
+            flag_set(
+                flag_groups = [
+                    flag_group(flags = ["-S", "-o", "%{output_file}"]),
+                    flag_group(
+                        flags = ["%{stripopts}"],
+                        iterate_over = "stripopts",
+                    ),
+                    flag_group(flags = ["%{input_file}"]),
+                ],
+            ),
+        ],
+        tools = [tool(path = "/usr/bin/strip")],
+    )
+
+    header_parsing_env_feature = feature(
+        name = "header_parsing_env",
+        env_sets = [
+            env_set(
+                actions = [ACTION_NAMES.cpp_header_parsing],
+                env_entries = [
+                    env_entry(
+                        key = "HEADER_PARSING_OUTPUT",
+                        value = "%{output_file}",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    cpp_header_parsing_action = action_config(
+        action_name = ACTION_NAMES.cpp_header_parsing,
+        implies = [
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "unfiltered_cxx_flags",
+            "header_parsing_env",
+        ],
+        flag_sets = [
+            flag_set(
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            # Note: This treats all headers as C++ headers, which may lead to
+                            # parsing failures for C headers that are not valid C++.
+                            # For such headers, use features = ["-parse_headers"] to selectively
+                            # disable parsing.
+                            "-xc++-header",
+                            "-fsyntax-only",
+                        ],
+                    ),
+                ],
+            ),
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    objc_compile_action = action_config(
+        action_name = ACTION_NAMES.objc_compile,
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                flag_groups = [flag_group(flags = ["-target", target_system_name])],
+            ),
+        ],
+        implies = [
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "objc_actions",
+            "apply_default_compiler_flags",
+            "apply_default_warnings",
+            "framework_paths",
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "apply_simulator_compiler_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    objc_link_flag_feature = feature(
+        name = "objc_link_flag",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [ACTION_NAMES.objc_executable, _OBJCPP_EXECUTABLE_ACTION_NAME],
+                flag_groups = [flag_group(flags = ["-ObjC"])],
+                with_features = [with_feature_set(not_features = ["kernel_extension"])],
+            ),
+        ],
+    )
+
+    objcpp_executable_action = action_config(
+        action_name = _OBJCPP_EXECUTABLE_ACTION_NAME,
+        flag_sets = [
+            flag_set(
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Xlinker",
+                            "-objc_abi_version",
+                            "-Xlinker",
+                            "2",
+                        ],
+                    ),
+                ],
+                with_features = [with_feature_set(not_features = ["kernel_extension"])],
+            ),
+            flag_set(
+                flag_groups = [
+                    flag_group(flags = ["-target", target_system_name]),
+                    flag_group(
+                        flags = ["-l%{library_names}"],
+                        iterate_over = "library_names",
+                    ),
+                    flag_group(flags = ["-filelist", "%{filelist}"]),
+                    flag_group(flags = ["-o", "%{linked_binary}"]),
+                    flag_group(
+                        flags = ["-force_load", "%{force_load_exec_paths}"],
+                        iterate_over = "force_load_exec_paths",
+                    ),
+                    flag_group(
+                        flags = ["%{dep_linkopts}"],
+                        iterate_over = "dep_linkopts",
+                    ),
+                    flag_group(
+                        flags = ["-Wl,%{attr_linkopts}"],
+                        iterate_over = "attr_linkopts",
+                    ),
+                ],
+            ),
+        ],
+        implies = [
+            "include_system_dirs",
+            "framework_paths",
+            "strip_debug_symbols",
+            "apple_env",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    cpp_link_dynamic_library_action = action_config(
+        action_name = ACTION_NAMES.cpp_link_dynamic_library,
+        implies = [
+            "has_configured_linker_path",
+            "shared_flag",
+            "linkstamps",
+            "output_execpath_flags",
+            "runtime_root_flags",
+            "input_param_flags",
+            "strip_debug_symbols",
+            "linker_param_file",
+            "apple_env",
+            "sysroot",
+        ],
+        tools = [
+            tool(
+                path = "cc_wrapper.sh",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    cpp_link_static_library_action = action_config(
+        action_name = ACTION_NAMES.cpp_link_static_library,
+        implies = [
+            "runtime_root_flags",
+            "archiver_flags",
+            "input_param_flags",
+            "linker_param_file",
+            "apple_env",
+        ],
+        tools = [
+            tool(
+                path = "libtool",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    c_compile_action = action_config(
+        action_name = ACTION_NAMES.c_compile,
+        implies = [
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "unfiltered_cxx_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    cpp_compile_action = action_config(
+        action_name = ACTION_NAMES.cpp_compile,
+        implies = [
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "unfiltered_cxx_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang_pp",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    objcpp_compile_action = action_config(
+        action_name = ACTION_NAMES.objcpp_compile,
+        flag_sets = [
+            flag_set(
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-target",
+                            target_system_name,
+                            "-stdlib=libc++",
+                            "-std=gnu++14",
+                        ],
+                    ),
+                ],
+            ),
+        ],
+        implies = [
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "apply_default_compiler_flags",
+            "apply_default_warnings",
+            "framework_paths",
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "apply_simulator_compiler_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang_pp",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    assemble_action = action_config(
+        action_name = ACTION_NAMES.assemble,
+        implies = [
+            "objc_arc",
+            "no_objc_arc",
+            "include_system_dirs",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "unfiltered_cxx_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    preprocess_assemble_action = action_config(
+        action_name = ACTION_NAMES.preprocess_assemble,
+        implies = [
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "unfiltered_cxx_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    objc_archive_action = action_config(
+        action_name = _OBJC_ARCHIVE_ACTION_NAME,
+        flag_sets = [
+            flag_set(
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-D",
+                            "-no_warning_for_no_symbols",
+                            "-static",
+                            "-filelist",
+                            "%{obj_list_path}",
+                            "-arch_only",
+                            arch,
+                            "-syslibroot",
+                            "__BAZEL_XCODE_SDKROOT__",
+                            "-o",
+                            "%{output_execpath}",
+                        ],
+                    ),
+                ],
+            ),
+        ],
+        implies = ["apple_env"],
+        tools = [
+            tool(
+                path = "libtool",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    objc_executable_action = action_config(
+        action_name = "objc-executable",
+        flag_sets = [
+            flag_set(
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Xlinker",
+                            "-objc_abi_version",
+                            "-Xlinker",
+                            "2",
+                        ],
+                    ),
+                ],
+                with_features = [with_feature_set(not_features = ["kernel_extension"])],
+            ),
+            flag_set(
+                flag_groups = [
+                    flag_group(flags = ["-target", target_system_name]),
+                    flag_group(
+                        flags = ["-l%{library_names}"],
+                        iterate_over = "library_names",
+                    ),
+                    flag_group(flags = ["-filelist", "%{filelist}"]),
+                    flag_group(flags = ["-o", "%{linked_binary}"]),
+                    flag_group(
+                        flags = ["-force_load", "%{force_load_exec_paths}"],
+                        iterate_over = "force_load_exec_paths",
+                    ),
+                    flag_group(
+                        flags = ["%{dep_linkopts}"],
+                        iterate_over = "dep_linkopts",
+                    ),
+                    flag_group(
+                        flags = ["-Wl,%{attr_linkopts}"],
+                        iterate_over = "attr_linkopts",
+                    ),
+                ],
+            ),
+        ],
+        implies = [
+            "include_system_dirs",
+            "framework_paths",
+            "strip_debug_symbols",
+            "apple_env",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    cpp_link_executable_action = action_config(
+        action_name = ACTION_NAMES.cpp_link_executable,
+        implies = [
+            "linkstamps",
+            "output_execpath_flags",
+            "runtime_root_flags",
+            "input_param_flags",
+            "force_pic_flags",
+            "strip_debug_symbols",
+            "linker_param_file",
+            "apple_env",
+            "sysroot",
+        ],
+        tools = [
+            tool(
+                path = "cc_wrapper.sh",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    linkstamp_compile_action = action_config(
+        action_name = ACTION_NAMES.linkstamp_compile,
+        implies = [
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "compiler_input_flags",
+            "compiler_output_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    cpp_module_compile_action = action_config(
+        action_name = ACTION_NAMES.cpp_module_compile,
+        implies = [
+            "preprocessor_defines",
+            "include_system_dirs",
+            "objc_arc",
+            "no_objc_arc",
+            "apple_env",
+            "user_compile_flags",
+            "sysroot",
+            "unfiltered_compile_flags",
+            "compiler_input_flags",
+            "compiler_output_flags",
+            "unfiltered_cxx_flags",
+        ],
+        tools = [
+            tool(
+                path = "wrapped_clang",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    cpp_link_nodeps_dynamic_library_action = action_config(
+        action_name = ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+        implies = [
+            "has_configured_linker_path",
+            "shared_flag",
+            "linkstamps",
+            "output_execpath_flags",
+            "runtime_root_flags",
+            "input_param_flags",
+            "strip_debug_symbols",
+            "linker_param_file",
+            "apple_env",
+            "sysroot",
+        ],
+        tools = [
+            tool(
+                path = "cc_wrapper.sh",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    objc_fully_link_action = action_config(
+        action_name = "objc-fully-link",
+        flag_sets = [
+            flag_set(
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-D",
+                            "-no_warning_for_no_symbols",
+                            "-static",
+                            "-arch_only",
+                            arch,
+                            "-syslibroot",
+                            "__BAZEL_XCODE_SDKROOT__",
+                            "-o",
+                            "%{fully_linked_archive_path}",
+                        ],
+                    ),
+                    flag_group(
+                        flags = ["%{objc_library_exec_paths}"],
+                        iterate_over = "objc_library_exec_paths",
+                    ),
+                    flag_group(
+                        flags = ["%{cc_library_exec_paths}"],
+                        iterate_over = "cc_library_exec_paths",
+                    ),
+                    flag_group(
+                        flags = ["%{imported_library_exec_paths}"],
+                        iterate_over = "imported_library_exec_paths",
+                    ),
+                ],
+            ),
+        ],
+        implies = ["apple_env"],
+        tools = [
+            tool(
+                path = "libtool",
+                execution_requirements = xcode_execution_requirements,
+            ),
+        ],
+    )
+
+    objcopy_embed_data_action = action_config(
+        action_name = "objcopy_embed_data",
+        enabled = True,
+        tools = [tool(path = "/usr/bin/objcopy")],
+    )
+
+    action_configs = [
+        strip_action,
+        c_compile_action,
+        cpp_compile_action,
+        linkstamp_compile_action,
+        cpp_module_compile_action,
+        cpp_header_parsing_action,
+        objc_compile_action,
+        objcpp_compile_action,
+        assemble_action,
+        preprocess_assemble_action,
+        objc_archive_action,
+        objc_executable_action,
+        objcpp_executable_action,
+        cpp_link_executable_action,
+        cpp_link_dynamic_library_action,
+        cpp_link_nodeps_dynamic_library_action,
+        cpp_link_static_library_action,
+        objc_fully_link_action,
+        objcopy_embed_data_action,
+    ]
+
+    if (ctx.attr.cpu == "ios_arm64" or
+        ctx.attr.cpu == "ios_arm64e" or
+        ctx.attr.cpu == "ios_sim_arm64" or
+        ctx.attr.cpu == "ios_x86_64" or
+        ctx.attr.cpu == "watchos_arm64_32" or
+        ctx.attr.cpu == "watchos_device_arm64" or
+        ctx.attr.cpu == "watchos_device_arm64e" or
+        ctx.attr.cpu == "watchos_armv7k" or
+        ctx.attr.cpu == "watchos_x86_64" or
+        ctx.attr.cpu == "watchos_arm64"):
+        apply_default_compiler_flags_feature = feature(
+            name = "apply_default_compiler_flags",
+            flag_sets = [
+                flag_set(
+                    actions = [ACTION_NAMES.objc_compile, ACTION_NAMES.objcpp_compile],
+                    flag_groups = [flag_group(flags = ["-DOS_IOS", "-fno-autolink"])],
+                ),
+            ],
+        )
+    elif (ctx.attr.cpu == "darwin_x86_64" or
+          ctx.attr.cpu == "darwin_arm64" or
+          ctx.attr.cpu == "darwin_arm64e"):
+        apply_default_compiler_flags_feature = feature(
+            name = "apply_default_compiler_flags",
+            flag_sets = [
+                flag_set(
+                    actions = [ACTION_NAMES.objc_compile, ACTION_NAMES.objcpp_compile],
+                    flag_groups = [flag_group(flags = ["-DOS_MACOSX", "-fno-autolink"])],
+                ),
+            ],
+        )
+    elif (ctx.attr.cpu == "tvos_arm64" or
+          ctx.attr.cpu == "tvos_x86_64" or
+          ctx.attr.cpu == "tvos_sim_arm64"):
+        apply_default_compiler_flags_feature = feature(
+            name = "apply_default_compiler_flags",
+            flag_sets = [
+                flag_set(
+                    actions = [ACTION_NAMES.objc_compile, ACTION_NAMES.objcpp_compile],
+                    flag_groups = [flag_group(flags = ["-DOS_TVOS", "-fno-autolink"])],
+                ),
+            ],
+        )
+    elif (
+        ctx.attr.cpu == "visionos_arm64" or
+        ctx.attr.cpu == "visionos_sim_arm64"
+    ):
+        apply_default_compiler_flags_feature = feature(
+            name = "apply_default_compiler_flags",
+            flag_sets = [
+                flag_set(
+                    actions = [ACTION_NAMES.objc_compile, ACTION_NAMES.objcpp_compile],
+                    flag_groups = [flag_group(flags = ["-fno-autolink"])],
+                ),
+            ],
+        )
+    else:
+        fail("""\
+Unknown CPU: {cpu}. Please update 'apple_support' to the latest version. If \
+you are sure you are on the latest version, try 'bazel shutdown' to work \
+around a Bazel staleness bug. Finally, if you still encounter this error, \
+please file an issue at https://github.com/bazelbuild/apple_support/issues/new
+""".format(cpu = ctx.attr.cpu))
+
+    runtime_root_flags_feature = feature(
+        name = "runtime_root_flags",
+        flag_sets = [
+            flag_set(
+                actions = all_link_actions +
+                          [ACTION_NAMES.cpp_link_static_library],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Xlinker",
+                            "-rpath",
+                            "-Xlinker",
+                            "@loader_path/%{runtime_library_search_directories}",
+                        ],
+                        iterate_over = "runtime_library_search_directories",
+                        expand_if_available = "runtime_library_search_directories",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    objc_arc_feature = feature(
+        name = "objc_arc",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-fobjc-arc"],
+                        expand_if_available = "objc_arc",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    unfiltered_cxx_flags_feature = feature(
+        name = "unfiltered_cxx_flags",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                ],
+                flag_groups = [
+                    flag_group(flags = ["-no-canonical-prefixes", "-pthread"]),
+                ],
+            ),
+        ],
+    )
+
+    compiler_input_flags_feature = feature(
+        name = "compiler_input_flags",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-c", "%{source_file}"],
+                        expand_if_available = "source_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    external_include_paths_feature = feature(
+        name = "external_include_paths",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.clif_match,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-isystem", "%{external_include_paths}"],
+                        iterate_over = "external_include_paths",
+                        expand_if_available = "external_include_paths",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    strip_debug_symbols_feature = feature(
+        name = "strip_debug_symbols",
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(
+                        flags = ["-Wl,-S"],
+                        expand_if_available = "strip_debug_symbols",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    shared_flag_feature = feature(
+        name = "shared_flag",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.cpp_link_dynamic_library,
+                    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+                ],
+                flag_groups = [flag_group(flags = ["-shared"])],
+            ),
+        ],
+    )
+
+    if is_simulator:
+        apply_simulator_compiler_flags_feature = feature(
+            name = "apply_simulator_compiler_flags",
+            flag_sets = [
+                flag_set(
+                    actions = [ACTION_NAMES.objc_compile, ACTION_NAMES.objcpp_compile],
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-fexceptions",
+                                "-fasm-blocks",
+                                "-fobjc-abi-version=2",
+                                "-fobjc-legacy-dispatch",
+                            ],
+                        ),
+                    ],
+                ),
+            ],
+        )
+    else:
+        apply_simulator_compiler_flags_feature = feature(name = "apply_simulator_compiler_flags")
+
+    user_link_flags_feature = feature(
+        name = "user_link_flags",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(
+                        flags = ["%{user_link_flags}"],
+                        iterate_over = "user_link_flags",
+                        expand_if_available = "user_link_flags",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    includes_feature = feature(
+        name = "includes",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    ACTION_NAMES.clif_match,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-include", "%{includes}"],
+                        iterate_over = "includes",
+                        expand_if_available = "includes",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    gcc_coverage_map_format_feature = feature(
+        name = "gcc_coverage_map_format",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-fprofile-arcs", "-ftest-coverage", "-g"],
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = [
+                    ACTION_NAMES.cpp_link_dynamic_library,
+                    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+                    ACTION_NAMES.cpp_link_executable,
+                ],
+                flag_groups = [flag_group(flags = ["--coverage"])],
+            ),
+        ],
+        requires = [feature_set(features = ["coverage"])],
+    )
+
+    gcc_quoting_for_param_files_feature = feature(
+        name = "gcc_quoting_for_param_files",
+        enabled = bazel_features.cc.fixed_dsym_path_quoting,
+    )
+
+    default_link_flags_feature = feature(
+        name = "default_link_flags",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-no-canonical-prefixes",
+                            "-target",
+                            target_system_name,
+                            "-fobjc-link-runtime",
+                        ],
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [flag_group(flags = ["-dead_strip"])],
+                with_features = [with_feature_set(features = ["opt"])],
+            ),
+        ],
+    )
+
+    no_deduplicate_feature = feature(
+        name = "no_deduplicate",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Xlinker",
+                            "-no_deduplicate",
+                        ],
+                    ),
+                ],
+                with_features = [
+                    with_feature_set(not_features = ["opt"]),
+                ],
+            ),
+        ],
+    )
+
+    output_execpath_flags_feature = feature(
+        name = "output_execpath_flags",
+        flag_sets = [
+            flag_set(
+                actions = all_link_actions,
+                flag_groups = [
+                    flag_group(
+                        flags = ["-o", "%{output_execpath}"],
+                        expand_if_available = "output_execpath",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    pic_feature = feature(
+        name = "pic",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.preprocess_assemble,
+                ],
+                flag_groups = [
+                    flag_group(flags = ["-fPIC"], expand_if_available = "pic"),
+                ],
+            ),
+        ],
+    )
+
+    framework_paths_feature = feature(
+        name = "framework_paths",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-F%{framework_include_paths}"],
+                        iterate_over = "framework_include_paths",
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = [
+                    "objc-executable",
+                    _OBJCPP_EXECUTABLE_ACTION_NAME,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-F%{framework_paths}"],
+                        iterate_over = "framework_paths",
+                    ),
+                    flag_group(
+                        flags = ["-framework", "%{framework_names}"],
+                        iterate_over = "framework_names",
+                    ),
+                    flag_group(
+                        flags = ["-weak_framework", "%{weak_framework_names}"],
+                        iterate_over = "weak_framework_names",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    compiler_output_flags_feature = feature(
+        name = "compiler_output_flags",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-S"],
+                        expand_if_available = "output_assembly_file",
+                    ),
+                    flag_group(
+                        flags = ["-E"],
+                        expand_if_available = "output_preprocess_file",
+                    ),
+                    flag_group(
+                        flags = ["-o", "%{output_file}"],
+                        expand_if_available = "output_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    pch_feature = feature(
+        name = "pch",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-include",
+                            "%{pch_file}",
+                        ],
+                        expand_if_available = "pch_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    include_system_dirs_feature = feature(
+        name = "include_system_dirs",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    "objc-executable",
+                    _OBJCPP_EXECUTABLE_ACTION_NAME,
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-isysroot",
+                            "__BAZEL_XCODE_SDKROOT__",
+                            "-F__BAZEL_XCODE_SDKROOT__/System/Library/Frameworks",
+                            "-F{}".format(apple_support.path_placeholders.platform_frameworks(apple_fragment = ctx.fragments.apple)),
+                        ],
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    input_param_flags_feature = feature(
+        name = "input_param_flags",
+        flag_sets = [
+            flag_set(
+                actions = all_link_actions +
+                          [ACTION_NAMES.cpp_link_static_library],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-L%{library_search_directories}"],
+                        iterate_over = "library_search_directories",
+                        expand_if_available = "library_search_directories",
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = all_link_actions +
+                          [ACTION_NAMES.cpp_link_static_library],
+                flag_groups = [
+                    flag_group(
+                        flags = ["%{libopts}"],
+                        iterate_over = "libopts",
+                        expand_if_available = "libopts",
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = all_link_actions +
+                          [ACTION_NAMES.cpp_link_static_library],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-Wl,-force_load,%{whole_archive_linker_params}"],
+                        iterate_over = "whole_archive_linker_params",
+                        expand_if_available = "whole_archive_linker_params",
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = all_link_actions +
+                          [ACTION_NAMES.cpp_link_static_library],
+                flag_groups = [
+                    flag_group(
+                        flags = ["%{linker_input_params}"],
+                        iterate_over = "linker_input_params",
+                        expand_if_available = "linker_input_params",
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = all_link_actions +
+                          [ACTION_NAMES.cpp_link_static_library],
+                flag_groups = [
+                    flag_group(
+                        iterate_over = "libraries_to_link",
+                        flag_groups = [
+                            flag_group(
+                                iterate_over = "libraries_to_link.object_files",
+                                flag_groups = [
+                                    flag_group(
+                                        flags = ["%{libraries_to_link.object_files}"],
+                                        expand_if_false = "libraries_to_link.is_whole_archive",
+                                    ),
+                                    flag_group(
+                                        flags = ["-Wl,-force_load,%{libraries_to_link.object_files}"],
+                                        expand_if_true = "libraries_to_link.is_whole_archive",
+                                    ),
+                                ],
+                                expand_if_equal = variable_with_value(
+                                    name = "libraries_to_link.type",
+                                    value = "object_file_group",
+                                ),
+                            ),
+                            flag_group(
+                                flag_groups = [
+                                    flag_group(
+                                        flags = ["%{libraries_to_link.name}"],
+                                        expand_if_false = "libraries_to_link.is_whole_archive",
+                                    ),
+                                    flag_group(
+                                        flags = ["-Wl,-force_load,%{libraries_to_link.name}"],
+                                        expand_if_true = "libraries_to_link.is_whole_archive",
+                                    ),
+                                ],
+                                expand_if_equal = variable_with_value(
+                                    name = "libraries_to_link.type",
+                                    value = "object_file",
+                                ),
+                            ),
+                            flag_group(
+                                flag_groups = [
+                                    flag_group(
+                                        flags = ["%{libraries_to_link.name}"],
+                                        expand_if_false = "libraries_to_link.is_whole_archive",
+                                    ),
+                                    flag_group(
+                                        flags = ["-Wl,-force_load,%{libraries_to_link.name}"],
+                                        expand_if_true = "libraries_to_link.is_whole_archive",
+                                    ),
+                                ],
+                                expand_if_equal = variable_with_value(
+                                    name = "libraries_to_link.type",
+                                    value = "interface_library",
+                                ),
+                            ),
+                            flag_group(
+                                flag_groups = [
+                                    flag_group(
+                                        flags = ["%{libraries_to_link.name}"],
+                                        expand_if_false = "libraries_to_link.is_whole_archive",
+                                    ),
+                                    flag_group(
+                                        flags = ["-Wl,-force_load,%{libraries_to_link.name}"],
+                                        expand_if_true = "libraries_to_link.is_whole_archive",
+                                    ),
+                                ],
+                                expand_if_equal = variable_with_value(
+                                    name = "libraries_to_link.type",
+                                    value = "static_library",
+                                ),
+                            ),
+                            flag_group(
+                                flag_groups = [
+                                    flag_group(
+                                        flags = ["-l%{libraries_to_link.name}"],
+                                        expand_if_false = "libraries_to_link.is_whole_archive",
+                                    ),
+                                    flag_group(
+                                        flags = ["-Wl,-force_load,-l%{libraries_to_link.name}"],
+                                        expand_if_true = "libraries_to_link.is_whole_archive",
+                                    ),
+                                ],
+                                expand_if_equal = variable_with_value(
+                                    name = "libraries_to_link.type",
+                                    value = "dynamic_library",
+                                ),
+                            ),
+                            flag_group(
+                                flag_groups = [
+                                    flag_group(
+                                        flags = ["%{libraries_to_link.path}"],
+                                    ),
+                                ],
+                                expand_if_equal = variable_with_value(
+                                    name = "libraries_to_link.type",
+                                    value = "versioned_dynamic_library",
+                                ),
+                            ),
+                        ],
+                        expand_if_available = "libraries_to_link",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    per_object_debug_info_feature = feature(
+        name = "per_object_debug_info",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-gsplit-dwarf", "-g"],
+                        expand_if_available = "per_object_debug_info_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    lipo_feature = feature(
+        name = "lipo",
+        flag_sets = [
+            flag_set(
+                actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
+                flag_groups = [flag_group(flags = ["-fripa"])],
+            ),
+        ],
+        requires = [
+            feature_set(features = ["autofdo"]),
+            feature_set(features = ["fdo_optimize"]),
+            feature_set(features = ["fdo_instrument"]),
+        ],
+    )
+
+    apple_env_feature = feature(
+        name = "apple_env",
+        env_sets = [
+            env_set(
+                actions = _DYNAMIC_LINK_ACTIONS + [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    _OBJC_ARCHIVE_ACTION_NAME,
+                    "objc-fully-link",
+                    ACTION_NAMES.cpp_link_static_library,
+                    ACTION_NAMES.linkstamp_compile,
+                ],
+                env_entries = [
+                    env_entry(
+                        key = "XCODE_VERSION_OVERRIDE",
+                        value = str(xcode_config.xcode_version()),
+                    ),
+                    # TODO: Remove once we drop bazel 7.x support
+                    env_entry(
+                        key = "APPLE_SDK_VERSION_OVERRIDE",
+                        value = str(sdk_version),
+                    ),
+                    env_entry(
+                        key = "APPLE_SDK_PLATFORM",
+                        value = _sdk_name(platform_type, is_simulator),
+                    ),
+                    env_entry(
+                        key = "ZERO_AR_DATE",
+                        value = "1",
+                    ),
+                ] + [env_entry(key = key, value = value) for key, value in ctx.attr.extra_env.items()],
+            ),
+        ],
+    )
+
+    if (ctx.attr.cpu == "ios_arm64" or
+        ctx.attr.cpu == "ios_arm64e" or
+        ctx.attr.cpu == "ios_x86_64" or
+        ctx.attr.cpu == "ios_sim_arm64" or
+        ctx.attr.cpu == "tvos_arm64" or
+        ctx.attr.cpu == "tvos_x86_64" or
+        ctx.attr.cpu == "tvos_sim_arm64" or
+        ctx.attr.cpu == "visionos_arm64" or
+        ctx.attr.cpu == "visionos_sim_arm64" or
+        ctx.attr.cpu == "watchos_arm64_32" or
+        ctx.attr.cpu == "watchos_device_arm64" or
+        ctx.attr.cpu == "watchos_device_arm64e" or
+        ctx.attr.cpu == "watchos_armv7k" or
+        ctx.attr.cpu == "watchos_x86_64" or
+        ctx.attr.cpu == "watchos_arm64"):
+        apply_implicit_frameworks_feature = feature(
+            name = "apply_implicit_frameworks",
+            enabled = True,
+            flag_sets = [
+                flag_set(
+                    actions = _DYNAMIC_LINK_ACTIONS,
+                    flag_groups = [
+                        flag_group(
+                            flags = ["-framework", "Foundation", "-framework", "UIKit"],
+                        ),
+                    ],
+                ),
+            ],
+        )
+    elif (ctx.attr.cpu == "darwin_x86_64" or
+          ctx.attr.cpu == "darwin_arm64" or
+          ctx.attr.cpu == "darwin_arm64e"):
+        apply_implicit_frameworks_feature = feature(
+            name = "apply_implicit_frameworks",
+            enabled = True,
+            flag_sets = [
+                flag_set(
+                    actions = _DYNAMIC_LINK_ACTIONS,
+                    flag_groups = [flag_group(flags = ["-framework", "Foundation"])],
+                    with_features = [with_feature_set(not_features = ["kernel_extension"])],
+                ),
+            ],
+        )
+    else:
+        apply_implicit_frameworks_feature = feature(name = "apply_implicit_frameworks")
+
+    random_seed_feature = feature(
+        name = "random_seed",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.cpp_module_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-frandom-seed=%{output_file}"],
+                        expand_if_available = "output_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    llvm_coverage_map_format_feature = feature(
+        name = "llvm_coverage_map_format",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-fprofile-instr-generate", "-fcoverage-mapping", "-g"],
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [flag_group(flags = ["-fprofile-instr-generate"])],
+            ),
+        ],
+        requires = [feature_set(features = ["coverage"])],
+    )
+
+    coverage_prefix_map_feature = feature(
+        name = "coverage_prefix_map",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-fcoverage-prefix-map=__BAZEL_EXECUTION_ROOT__=."],
+                    ),
+                ],
+            ),
+        ],
+        requires = [feature_set(features = ["coverage"])],
+    )
+
+    force_pic_flags_feature = feature(
+        name = "force_pic_flags",
+        flag_sets = [
+            flag_set(
+                actions = [ACTION_NAMES.cpp_link_executable],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-Wl,-pie"],
+                        expand_if_available = "force_pic",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    sysroot_feature = feature(
+        name = "sysroot",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_link_executable,
+                    ACTION_NAMES.cpp_link_dynamic_library,
+                    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.clif_match,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["--sysroot=%{sysroot}"],
+                        expand_if_available = "sysroot",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    autofdo_feature = feature(
+        name = "autofdo",
+        flag_sets = [
+            flag_set(
+                actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-fauto-profile=%{fdo_profile_path}",
+                            "-fprofile-correction",
+                        ],
+                        expand_if_available = "fdo_profile_path",
+                    ),
+                ],
+            ),
+        ],
+        provides = ["profile"],
+    )
+
+    link_libcpp_feature = feature(
+        name = "link_libc++",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [flag_group(flags = ["-lc++"])],
+                with_features = [with_feature_set(not_features = ["kernel_extension"])],
+            ),
+        ],
+    )
+
+    objc_actions_feature = feature(
+        name = "objc_actions",
+        implies = [
+            "objc-compile",
+            "objc++-compile",
+            "objc-fully-link",
+            _OBJC_ARCHIVE_ACTION_NAME,
+            "objc-executable",
+            _OBJCPP_EXECUTABLE_ACTION_NAME,
+            "assemble",
+            "preprocess-assemble",
+            "c-compile",
+            "c++-compile",
+            "c++-link-static-library",
+            "c++-link-dynamic-library",
+            "c++-link-nodeps-dynamic-library",
+            "c++-link-executable",
+        ],
+    )
+
+    unfiltered_compile_flags_feature = feature(
+        name = "unfiltered_compile_flags",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.linkstamp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-no-canonical-prefixes",
+                            "-Wno-builtin-macro-redefined",
+                            "-D__DATE__=\"redacted\"",
+                            "-D__TIMESTAMP__=\"redacted\"",
+                            "-D__TIME__=\"redacted\"",
+                            "-target",
+                            target_system_name,
+                        ],
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    linker_param_file_feature = feature(
+        name = "linker_param_file",
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS + [
+                    ACTION_NAMES.cpp_link_static_library,
+                    _OBJC_ARCHIVE_ACTION_NAME,
+                    ACTION_NAMES.objc_fully_link,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["@%{linker_param_file}"],
+                        expand_if_available = "linker_param_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    relative_ast_path_feature = feature(
+        name = "relative_ast_path",
+        enabled = True,
+        env_sets = [
+            env_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                env_entries = [
+                    env_entry(
+                        key = "RELATIVE_AST_PATH",
+                        value = "true",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    archiver_flags_feature = feature(
+        name = "archiver_flags",
+        flag_sets = [
+            flag_set(
+                actions = [ACTION_NAMES.cpp_link_static_library],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-D",
+                            "-no_warning_for_no_symbols",
+                            "-static",
+                            "-o",
+                            "%{output_execpath}",
+                        ],
+                        expand_if_available = "output_execpath",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    fdo_optimize_feature = feature(
+        name = "fdo_optimize",
+        flag_sets = [
+            flag_set(
+                actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-fprofile-use=%{fdo_profile_path}",
+                            "-Wno-profile-instr-unprofiled",
+                            "-Wno-profile-instr-out-of-date",
+                            "-fprofile-correction",
+                        ],
+                        expand_if_available = "fdo_profile_path",
+                    ),
+                ],
+            ),
+        ],
+        provides = ["profile"],
+    )
+
+    no_objc_arc_feature = feature(
+        name = "no_objc_arc",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-fno-objc-arc"],
+                        expand_if_available = "no_objc_arc",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    debug_prefix_map_pwd_is_dot_feature = feature(
+        name = "debug_prefix_map_pwd_is_dot",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [flag_group(flags = ["-fdebug-prefix-map=__BAZEL_EXECUTION_ROOT__=."])],
+            ),
+        ],
+    )
+
+    remap_xcode_path_feature = feature(
+        name = "remap_xcode_path",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [flag_group(flags = [
+                    "-fdebug-prefix-map=__BAZEL_XCODE_DEVELOPER_DIR__=/PLACEHOLDER_DEVELOPER_DIR",
+                ])],
+            ),
+        ],
+    )
+
+    linkstamps_feature = feature(
+        name = "linkstamps",
+        flag_sets = [
+            flag_set(
+                actions = all_link_actions,
+                flag_groups = [
+                    flag_group(
+                        flags = ["%{linkstamp_paths}"],
+                        iterate_over = "linkstamp_paths",
+                        expand_if_available = "linkstamp_paths",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    include_paths_feature = feature(
+        name = "include_paths",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.clif_match,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-iquote", "%{quote_include_paths}"],
+                        iterate_over = "quote_include_paths",
+                    ),
+                    flag_group(
+                        flags = ["-I%{include_paths}"],
+                        iterate_over = "include_paths",
+                    ),
+                    flag_group(
+                        flags = ["-isystem", "%{system_include_paths}"],
+                        iterate_over = "system_include_paths",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    default_compile_flags_feature = feature(
+        name = "default_compile_flags",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.lto_backend,
+                    ACTION_NAMES.clif_match,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-D_FORTIFY_SOURCE=1",
+                        ],
+                    ),
+                ],
+                with_features = [with_feature_set(not_features = ["asan"])],
+            ),
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.lto_backend,
+                    ACTION_NAMES.clif_match,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-fstack-protector",
+                            "-fcolor-diagnostics",
+                            "-Wall",
+                            "-Wthread-safety",
+                            "-Wself-assign",
+                            "-fno-omit-frame-pointer",
+                        ],
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.lto_backend,
+                    ACTION_NAMES.clif_match,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [flag_group(flags = ["-g2"])],
+                with_features = [with_feature_set(features = ["dbg"])],
+            ),
+            flag_set(
+                actions = all_c_compile_actions,
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-std=c11",
+                        ],
+                    ),
+                ],
+            ),
+            flag_set(
+                actions = [
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.lto_backend,
+                    ACTION_NAMES.clif_match,
+                ],
+                flag_groups = [flag_group(flags = ["-std=c++20"])],
+            ),
+        ],
+    )
+
+    ns_block_assertions_feature = feature(
+        name = "ns_block_assertions",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.lto_backend,
+                    ACTION_NAMES.clif_match,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [flag_group(flags = ["-DNS_BLOCK_ASSERTIONS=1"])],
+                with_features = [with_feature_set(features = ["opt"])],
+            ),
+        ],
+    )
+
+    objcopy_embed_flags_feature = feature(
+        name = "objcopy_embed_flags",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = ["objcopy_embed_data"],
+                flag_groups = [flag_group(flags = ["-I", "binary"])],
+            ),
+        ],
+    )
+
+    dead_strip_feature = feature(
+        name = "dead_strip",
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [flag_group(flags = ["-dead_strip"])],
+            ),
+        ],
+    )
+
+    oso_prefix_feature = feature(
+        name = "oso_prefix_is_pwd",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [flag_group(flags = ["-Wl,-oso_prefix,__BAZEL_EXECUTION_ROOT_NO_SANDBOX__/"])],
+            ),
+        ],
+    )
+
+    generate_dsym_file_feature = feature(
+        name = "generate_dsym_file",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    "objc-executable",
+                    _OBJCPP_EXECUTABLE_ACTION_NAME,
+                ],
+                flag_groups = [flag_group(flags = ["-g"])],
+            ),
+            flag_set(
+                actions = ["objc-executable", _OBJCPP_EXECUTABLE_ACTION_NAME],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "DSYM_HINT_LINKED_BINARY=%{linked_binary}",
+                            "DSYM_HINT_DSYM_PATH=%{dsym_path}",
+                        ],
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    # Kernel extensions for Apple Silicon are arm64e.
+    if (ctx.attr.cpu == "darwin_x86_64" or
+        ctx.attr.cpu == "darwin_arm64e"):
+        kernel_extension_feature = feature(
+            name = "kernel_extension",
+            flag_sets = [
+                flag_set(
+                    actions = ["objc-executable", _OBJCPP_EXECUTABLE_ACTION_NAME],
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-nostdlib",
+                                "-lkmod",
+                                "-lkmodc++",
+                                "-lcc_kext",
+                                "-Xlinker",
+                                "-kext",
+                            ],
+                        ),
+                    ],
+                ),
+            ],
+        )
+    else:
+        kernel_extension_feature = feature(name = "kernel_extension")
+
+    apply_default_warnings_feature = feature(
+        name = "apply_default_warnings",
+        flag_sets = [
+            flag_set(
+                actions = [ACTION_NAMES.objc_compile, ACTION_NAMES.objcpp_compile],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Werror=incompatible-sysroot",
+                            "-Wshorten-64-to-32",
+                            "-Wbool-conversion",
+                            "-Wconstant-conversion",
+                            "-Wduplicate-method-match",
+                            "-Wempty-body",
+                            "-Wenum-conversion",
+                            "-Wint-conversion",
+                            "-Wunreachable-code",
+                            "-Wmismatched-return-types",
+                            "-Wundeclared-selector",
+                            "-Wuninitialized",
+                            "-Wunused-function",
+                            "-Wunused-variable",
+                        ],
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    dependency_file_feature = feature(
+        name = "dependency_file",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-MD", "-MF", "%{dependency_file}"],
+                        expand_if_available = "dependency_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    serialized_diagnostics_file_feature = feature(
+        name = "serialized_diagnostics_file",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["--serialize-diagnostics", "%{serialized_diagnostics_file}"],
+                        expand_if_available = "serialized_diagnostics_file",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    preprocessor_defines_feature = feature(
+        name = "preprocessor_defines",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["-D%{preprocessor_defines}"],
+                        iterate_over = "preprocessor_defines",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    fdo_instrument_feature = feature(
+        name = "fdo_instrument",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_link_dynamic_library,
+                    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+                    ACTION_NAMES.cpp_link_executable,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-fprofile-generate=%{fdo_instrument_path}",
+                            "-fno-data-sections",
+                        ],
+                        expand_if_available = "fdo_instrument_path",
+                    ),
+                ],
+            ),
+        ],
+        provides = ["profile"],
+    )
+
+    if (ctx.attr.cpu == "darwin_x86_64" or
+        ctx.attr.cpu == "darwin_arm64" or
+        ctx.attr.cpu == "darwin_arm64e"):
+        link_cocoa_feature = feature(
+            name = "link_cocoa",
+            flag_sets = [
+                flag_set(
+                    actions = ["objc-executable", _OBJCPP_EXECUTABLE_ACTION_NAME],
+                    flag_groups = [flag_group(flags = ["-framework", "Cocoa"])],
+                ),
+            ],
+        )
+    else:
+        link_cocoa_feature = feature(name = "link_cocoa")
+
+    user_compile_flags_feature = feature(
+        name = "user_compile_flags",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.assemble,
+                    ACTION_NAMES.preprocess_assemble,
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.cpp_header_parsing,
+                    ACTION_NAMES.cpp_module_compile,
+                    ACTION_NAMES.cpp_module_codegen,
+                    ACTION_NAMES.linkstamp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = ["%{user_compile_flags}"],
+                        iterate_over = "user_compile_flags",
+                        expand_if_available = "user_compile_flags",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    headerpad_feature = feature(
+        name = "headerpad",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [flag_group(flags = ["-headerpad_max_install_names"])],
+            ),
+        ],
+    )
+
+    generate_linkmap_feature = feature(
+        name = "generate_linkmap",
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Xlinker",
+                            "-map",
+                            "-Xlinker",
+                            "%{linkmap_exec_path}",
+                        ],
+                        expand_if_available = "linkmap_exec_path",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    set_install_name = feature(
+        name = "set_install_name",
+        enabled = ctx.fragments.cpp.do_not_use_macos_set_install_name,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.cpp_link_dynamic_library,
+                    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Xlinker",
+                            "-install_name",
+                            "-Xlinker",
+                            "@rpath/%{runtime_solib_name}",
+                        ],
+                        expand_if_available = "runtime_solib_name",
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    asan_feature = feature(
+        name = "asan",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(flags = ["-fsanitize=address"]),
+                ],
+                with_features = [
+                    with_feature_set(features = ["asan"]),
+                ],
+            ),
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(flags = ["-fsanitize=address"]),
+                ],
+                with_features = [
+                    with_feature_set(features = ["asan"]),
+                ],
+            ),
+        ],
+    )
+
+    tsan_feature = feature(
+        name = "tsan",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(flags = ["-fsanitize=thread"]),
+                ],
+                with_features = [
+                    with_feature_set(features = ["tsan"]),
+                ],
+            ),
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(flags = ["-fsanitize=thread"]),
+                ],
+                with_features = [
+                    with_feature_set(features = ["tsan"]),
+                ],
+            ),
+        ],
+    )
+
+    ubsan_feature = feature(
+        name = "ubsan",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(flags = ["-fsanitize=undefined"]),
+                ],
+                with_features = [
+                    with_feature_set(features = ["ubsan"]),
+                ],
+            ),
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(flags = ["-fsanitize=undefined"]),
+                ],
+                with_features = [
+                    with_feature_set(features = ["ubsan"]),
+                ],
+            ),
+        ],
+    )
+
+    default_sanitizer_flags_feature = feature(
+        name = "default_sanitizer_flags",
+        enabled = True,
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-gline-tables-only",
+                            "-fno-omit-frame-pointer",
+                            "-fno-sanitize-recover=all",
+                        ],
+                    ),
+                ],
+                with_features = [
+                    with_feature_set(features = ["asan"]),
+                    with_feature_set(features = ["tsan"]),
+                    with_feature_set(features = ["ubsan"]),
+                ],
+            ),
+        ],
+    )
+
+    treat_warnings_as_errors_feature = feature(
+        name = "treat_warnings_as_errors",
+        flag_sets = [
+            flag_set(
+                actions = [
+                    ACTION_NAMES.c_compile,
+                    ACTION_NAMES.cpp_compile,
+                    ACTION_NAMES.objc_compile,
+                    ACTION_NAMES.objcpp_compile,
+                ],
+                flag_groups = [flag_group(flags = ["-Werror"])],
+            ),
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [flag_group(flags = ["-Wl,-fatal_warnings"])],
+            ),
+        ],
+    )
+
+    # As of Xcode 15, linker warnings are emitted if duplicate `-l` options are
+    # present. Until such linkopts can be deduped by bazel itself, we disable
+    # these warnings.
+    no_warn_duplicate_libraries_feature = feature(
+        name = "no_warn_duplicate_libraries",
+        enabled = "no_warn_duplicate_libraries" in ctx.features,
+        flag_sets = [
+            flag_set(
+                actions = _DYNAMIC_LINK_ACTIONS,
+                flag_groups = [
+                    flag_group(
+                        flags = [
+                            "-Wl,-no_warn_duplicate_libraries",
+                        ],
+                    ),
+                ],
+            ),
+        ],
+    )
+
+    modulemaps = ctx.attr.module_map.files.to_list()
+    if modulemaps:
+        if len(modulemaps) != 1:
+            fail("internal error: expected 1 modulemap got:", modulemaps)
+        layering_check_feature = feature(
+            name = "layering_check",
+            flag_sets = [
+                flag_set(
+                    actions = [
+                        ACTION_NAMES.c_compile,
+                        ACTION_NAMES.cpp_compile,
+                        ACTION_NAMES.cpp_header_parsing,
+                        ACTION_NAMES.cpp_module_compile,
+                        ACTION_NAMES.objc_compile,
+                        ACTION_NAMES.objcpp_compile,
+                    ],
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-fmodules-strict-decluse",
+                                "-Wprivate-header",
+                                "-Xclang",
+                                "-fmodule-name=%{module_name}",
+                                "-Xclang",
+                                "-fmodule-map-file=%{module_map_file}",
+                            ],
+                        ),
+                        flag_group(
+                            iterate_over = "dependent_module_map_files",
+                            flags = [
+                                "-Xclang",
+                                "-fmodule-map-file=%{dependent_module_map_files}",
+                            ],
+                        ),
+                    ],
+                ),
+            ],
+            env_sets = [
+                env_set(
+                    actions = [
+                        ACTION_NAMES.c_compile,
+                        ACTION_NAMES.cpp_compile,
+                        ACTION_NAMES.cpp_header_parsing,
+                        ACTION_NAMES.cpp_module_compile,
+                        ACTION_NAMES.objc_compile,
+                        ACTION_NAMES.objcpp_compile,
+                    ],
+                    env_entries = [
+                        env_entry(
+                            key = "APPLE_SUPPORT_MODULEMAP",
+                            value = modulemaps[0].path,
+                        ),
+                    ],
+                ),
+            ],
+        )
+    else:
+        layering_check_feature = feature(name = "layering_check")
+
+    features = [
+        # Marker features
+        feature(name = "archive_param_file", enabled = True),
+        feature(name = "compile_all_modules"),
+        feature(name = "coverage"),
+        feature(name = "dbg"),
+        feature(name = "exclude_private_headers_in_module_maps"),
+        feature(name = "fastbuild"),
+        feature(name = "has_configured_linker_path"),
+        feature(name = "module_maps", enabled = True),
+        feature(name = "no_legacy_features"),
+        feature(name = "only_doth_headers_in_module_maps"),
+        feature(name = "opt"),
+        feature(name = "parse_headers"),
+
+        # Features with more configuration
+        link_libcpp_feature,
+        default_compile_flags_feature,
+        ns_block_assertions_feature,
+        debug_prefix_map_pwd_is_dot_feature,
+        remap_xcode_path_feature,
+        generate_dsym_file_feature,
+        generate_linkmap_feature,
+        oso_prefix_feature,
+        objc_actions_feature,
+        strip_debug_symbols_feature,
+        shared_flag_feature,
+        kernel_extension_feature,
+        linkstamps_feature,
+        output_execpath_flags_feature,
+        archiver_flags_feature,
+        runtime_root_flags_feature,
+        input_param_flags_feature,
+        objc_link_flag_feature,
+        force_pic_flags_feature,
+        pch_feature,
+        apply_default_warnings_feature,
+        includes_feature,
+        include_paths_feature,
+        sysroot_feature,
+        dependency_file_feature,
+        serialized_diagnostics_file_feature,
+        pic_feature,
+        per_object_debug_info_feature,
+        preprocessor_defines_feature,
+        framework_paths_feature,
+        random_seed_feature,
+        fdo_instrument_feature,
+        fdo_optimize_feature,
+        autofdo_feature,
+        lipo_feature,
+        llvm_coverage_map_format_feature,
+        gcc_coverage_map_format_feature,
+        coverage_prefix_map_feature,
+        apply_default_compiler_flags_feature,
+        include_system_dirs_feature,
+        headerpad_feature,
+        objc_arc_feature,
+        no_objc_arc_feature,
+        apple_env_feature,
+        relative_ast_path_feature,
+        gcc_quoting_for_param_files_feature,
+        user_link_flags_feature,
+        default_link_flags_feature,
+        no_deduplicate_feature,
+        dead_strip_feature,
+        apply_implicit_frameworks_feature,
+        link_cocoa_feature,
+        apply_simulator_compiler_flags_feature,
+        unfiltered_cxx_flags_feature,
+        user_compile_flags_feature,
+        unfiltered_compile_flags_feature,
+        linker_param_file_feature,
+        compiler_input_flags_feature,
+        compiler_output_flags_feature,
+        objcopy_embed_flags_feature,
+        set_install_name,
+        asan_feature,
+        tsan_feature,
+        ubsan_feature,
+        default_sanitizer_flags_feature,
+        treat_warnings_as_errors_feature,
+        no_warn_duplicate_libraries_feature,
+        layering_check_feature,
+        external_include_paths_feature,
+        header_parsing_env_feature,
+    ] + get_apple_features(ctx)  #### mongodb customization ###
+
+    if (ctx.attr.cpu == "darwin_x86_64" or
+        ctx.attr.cpu == "darwin_arm64" or
+        ctx.attr.cpu == "darwin_arm64e"):
+        features.append(feature(name = "dynamic_linking_mode"))
+
+    # macOS artifact name patterns differ from the defaults only for dynamic
+    # libraries.
+    artifact_name_patterns = [
+        artifact_name_pattern(
+            category_name = "dynamic_library",
+            prefix = "lib",
+            extension = ".dylib",
+        ),
+    ]
+
+    make_variables = [
+        make_variable(
+            name = "STACK_FRAME_UNLIMITED",
+            value = "-Wframe-larger-than=100000000 -Wno-vla",
+        ),
+    ]
+
+    tool_paths = {
+        "ar": "libtool",
+        "cpp": "/usr/bin/cpp",
+        "dwp": "/usr/bin/dwp",
+        "gcc": "cc_wrapper.sh",
+        "gcov": "/usr/bin/gcov",
+        "ld": "/usr/bin/ld",
+        "nm": "/usr/bin/nm",
+        "objcopy": "/usr/bin/objcopy",
+        "objdump": "/usr/bin/objdump",
+        "strip": "/usr/bin/strip",
+    }
+
+    tool_paths.update(ctx.attr.tool_paths_overrides)
+
+    out = ctx.actions.declare_file(ctx.label.name)
+    ctx.actions.write(out, "Fake executable")
+    return [
+        cc_common.create_cc_toolchain_config_info(
+            ctx = ctx,
+            features = features,
+            action_configs = action_configs,
+            artifact_name_patterns = artifact_name_patterns,
+            cxx_builtin_include_directories = ctx.attr.cxx_builtin_include_directories,
+            toolchain_identifier = ctx.attr.cpu,
+            host_system_name = "x86_64-apple-macosx",
+            target_system_name = target_system_name,
+            target_cpu = ctx.attr.cpu,
+            target_libc = target_libc,
+            compiler = "clang",
+            abi_version = abi_version,
+            abi_libc_version = abi_libc_version,
+            tool_paths = [tool_path(name = name, path = path) for (name, path) in tool_paths.items()],
+            make_variables = make_variables,
+            builtin_sysroot = None,
+        ),
+        DefaultInfo(
+            executable = out,
+        ),
+    ]
+
+cc_toolchain_config = rule(
+    implementation = _impl,
+    attrs = {
+        "cpu": attr.string(mandatory = True),
+        "cxx_builtin_include_directories": attr.string_list(),
+        "tool_paths_overrides": attr.string_dict(),
+        "extra_env": attr.string_dict(),
+        "module_map": attr.label(),
+        "_xcode_config": attr.label(default = configuration_field(
+            fragment = "apple",
+            name = "xcode_config_label",
+        )),
+        ###
+        # mongodb customization
+        "compiler": attr.string(mandatory = True),
+        "optimization_level": attr.string(mandatory = False),
+        ###
+    },
+    provides = [CcToolchainConfigInfo],
+    executable = True,
+    fragments = [
+        "apple",
+        "cpp",
+    ],
+)
diff --git a/bazel/toolchains/cc/mongo_apple/mongo_apple_toolchain.BUILD.tmpl b/bazel/toolchains/cc/mongo_apple/mongo_apple_toolchain.BUILD.tmpl
new file mode 100644
index 00000000000..04ae8af1db0
--- /dev/null
+++ b/bazel/toolchains/cc/mongo_apple/mongo_apple_toolchain.BUILD.tmpl
@@ -0,0 +1,23 @@
+load("@build_bazel_apple_support//configs:platforms.bzl", "APPLE_PLATFORMS_CONSTRAINTS")
+load("@//bazel/toolchains/cc/mongo_apple:mongo_apple_toolchain.bzl", "get_supported_apple_archs")
+package(default_visibility = ["//visibility:public"])
+
+[
+    toolchain(
+        name = "mongo_apple_" + apple_arch + "_toolchain",
+        exec_compatible_with = [
+            "@platforms//os:macos",
+            "@platforms//cpu:" + cpu,
+        ],
+        target_compatible_with = [
+            "@platforms//os:macos",
+            "@platforms//cpu:" + cpu,
+        ],
+        toolchain = select({
+            "@//bazel/config:use_apple_clang": "@mongo_apple_toolchain_config//:cc-compiler-" + apple_arch,
+            "@//conditions:default": "@mongo_apple_brew_llvm_toolchain_config//:cc-compiler-" + apple_arch,
+        }),
+        toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
+    )
+    for apple_arch, cpu in get_supported_apple_archs().items()
+]
diff --git a/bazel/toolchains/cc/mongo_apple/mongo_apple_toolchain.bzl b/bazel/toolchains/cc/mongo_apple/mongo_apple_toolchain.bzl
index 1f7ef20ba97..33e153302bd 100644
--- a/bazel/toolchains/cc/mongo_apple/mongo_apple_toolchain.bzl
+++ b/bazel/toolchains/cc/mongo_apple/mongo_apple_toolchain.bzl
@@ -1,4 +1,285 @@
+# Copyright 2016 The Bazel Authors. All rights reserved.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+"""Configuring the C++ toolchain on macOS."""
+
+load(
+    "@bazel_tools//tools/cpp:lib_cc_configure.bzl",
+    "escape_string",
+)
+load("@bazel_tools//tools/osx:xcode_configure.bzl", "run_xcode_locator")
+
+###
+# mongodb customization
 load("@build_bazel_apple_support//configs:platforms.bzl", "APPLE_PLATFORMS_CONSTRAINTS")
+load("//bazel/platforms:normalize.bzl", "ARCH_NORMALIZE_MAP")
+###
+
+_DISABLE_ENV_VAR = "BAZEL_NO_APPLE_CPP_TOOLCHAIN"
+_OLD_DISABLE_ENV_VAR = "BAZEL_USE_CPP_ONLY_TOOLCHAIN"
+
+def _get_escaped_xcode_cxx_inc_directories(repository_ctx, xcode_toolchains):
+    """Compute the list of default C++ include paths on Xcode-enabled darwin.
+
+    Args:
+      repository_ctx: The repository context.
+      xcode_toolchains: A list containing the xcode toolchains available
+    Returns:
+      include_paths: A list of builtin include paths.
+    """
+
+    # Assume that everything is managed by Xcode / toolchain installations
+    include_dirs = [
+        "/Applications/",
+        "/Library/",
+    ]
+
+    user = repository_ctx.os.environ.get("USER")
+    if user:
+        include_dirs.extend([
+            "/Users/{}/Applications/".format(user),
+            "/Users/{}/Library/".format(user),
+        ])
+
+    # Include extra Xcode paths in case they're installed on other volumes
+    for toolchain in xcode_toolchains:
+        include_dirs.append(escape_string(toolchain.developer_dir))
+
+    return include_dirs
+
+def _succeeds(repository_ctx, *args):
+    env = repository_ctx.os.environ
+    result = repository_ctx.execute([
+        "env",
+        "-i",
+        "DEVELOPER_DIR={}".format(env.get("DEVELOPER_DIR", default = "")),
+        "xcrun",
+        "--sdk",
+        "macosx",
+    ] + list(args))
+
+    return result.return_code == 0
+
+def _generate_system_modulemap(repository_ctx, script, output):
+    env = repository_ctx.os.environ
+    result = repository_ctx.execute([
+        "env",
+        "-i",
+        "DEVELOPER_DIR={}".format(env.get("DEVELOPER_DIR", default = "")),
+        script,
+    ])
+
+    if result.return_code != 0:
+        error_msg = (
+            "return code {code}, stderr: {err}, stdout: {out}"
+        ).format(
+            code = result.return_code,
+            err = result.stderr,
+            out = result.stdout,
+        )
+        fail(output + " failed to generate. Please file an issue at " +
+             "https://github.com/bazelbuild/apple_support/issues with the following:\n" +
+             error_msg)
+
+    repository_ctx.file(output, result.stdout)
+
+def _compile_cc_file(repository_ctx, src_name, out_name):
+    env = repository_ctx.os.environ
+    xcrun_result = repository_ctx.execute([
+        "env",
+        "-i",
+        "DEVELOPER_DIR={}".format(env.get("DEVELOPER_DIR", default = "")),
+        "xcrun",
+        "--sdk",
+        "macosx",
+        "clang",
+        "-mmacosx-version-min=10.15",
+        "-std=c++17",
+        "-lc++",
+        "-arch",
+        "arm64",
+        "-arch",
+        "x86_64",
+        "-Wl,-no_adhoc_codesign",
+        "-Wl,-no_uuid",
+        "-O3",
+        "-o",
+        out_name,
+        src_name,
+    ])
+
+    if xcrun_result.return_code != 0:
+        error_msg = (
+            "return code {code}, stderr: {err}, stdout: {out}"
+        ).format(
+            code = xcrun_result.return_code,
+            err = xcrun_result.stderr,
+            out = xcrun_result.stdout,
+        )
+        fail(out_name + " failed to generate. Please file an issue at " +
+             "https://github.com/bazelbuild/apple_support/issues with the following:\n" +
+             error_msg)
+
+    xcrun_result = repository_ctx.execute([
+        "env",
+        "-i",
+        "codesign",
+        "--identifier",  # Required to be reproducible across archs
+        out_name,
+        "--force",
+        "--sign",
+        "-",
+        out_name,
+    ])
+    if xcrun_result.return_code != 0:
+        error_msg = (
+            "codesign return code {code}, stderr: {err}, stdout: {out}"
+        ).format(
+            code = xcrun_result.return_code,
+            err = xcrun_result.stderr,
+            out = xcrun_result.stdout,
+        )
+        fail(out_name + " failed to generate. Please file an issue at " +
+             "https://github.com/bazelbuild/apple_support/issues with the following:\n" +
+             error_msg)
+
+def configure_osx_toolchain(repository_ctx):
+    """Configure C++ toolchain on macOS.
+
+    Args:
+      repository_ctx: The repository context.
+
+    Returns:
+      Whether or not configuration was successful
+    """
+
+    # All Label resolutions done at the top of the function to avoid issues
+    # with starlark function restarts, see this:
+    # https://github.com/bazelbuild/bazel/blob/ab71a1002c9c53a8061336e40f91204a2a32c38e/tools/cpp/lib_cc_configure.bzl#L17-L38
+    # for more info
+    xcode_locator = Label("@bazel_tools//tools/osx:xcode_locator.m")
+    osx_cc_wrapper = Label("@bazel_tools//tools/cpp:osx_cc_wrapper.sh.tpl")
+    xcrunwrapper = Label("@build_bazel_apple_support//crosstool:xcrunwrapper.sh")
+    libtool = Label("@build_bazel_apple_support//crosstool:libtool.sh")
+    make_hashed_objlist = Label("@build_bazel_apple_support//crosstool:make_hashed_objlist.py")
+
+    ###
+    # mongodb customization
+    cc_toolchain_config = Label("@//bazel/toolchains/cc/mongo_apple:mongo_apple_cc_toolchain_config.bzl")
+    build_template = Label("@//bazel/toolchains/cc/mongo_apple:BUILD.tpl")
+    ###
+
+    libtool_check_unique_src_path = str(repository_ctx.path(
+        Label("@build_bazel_apple_support//crosstool:libtool_check_unique.cc"),
+    ))
+    wrapped_clang_src_path = str(repository_ctx.path(
+        Label("@build_bazel_apple_support//crosstool:wrapped_clang.cc"),
+    ))
+    generate_modulemap_path = str(repository_ctx.path(
+        Label("@build_bazel_apple_support//crosstool:generate-modulemap.sh"),
+    ))
+
+    xcode_toolchains = []
+    xcodeloc_err = ""
+    allow_non_applications_xcode = "BAZEL_ALLOW_NON_APPLICATIONS_XCODE" in repository_ctx.os.environ and repository_ctx.os.environ["BAZEL_ALLOW_NON_APPLICATIONS_XCODE"] == "1"
+    if allow_non_applications_xcode:
+        (xcode_toolchains, xcodeloc_err) = run_xcode_locator(repository_ctx, xcode_locator)
+        if not xcode_toolchains:
+            return False, xcodeloc_err
+
+    # For Xcode toolchains, there's no reason to use anything other than
+    # wrapped_clang, so that we still get the Bazel Xcode placeholder
+    # substitution and other behavior for actions that invoke this
+    # cc_wrapper.sh script. The wrapped_clang binary is already hardcoded
+    # into the Objective-C crosstool actions, anyway, so this ensures that
+    # the C++ actions behave consistently.
+    cc_path = '"$(/usr/bin/dirname "$0")"/wrapped_clang'
+
+    ###
+    # mongodb customization
+    # pass through cc_wrapper script
+    repository_ctx.file(
+        "cc_wrapper.sh",
+        """
+#!/bin/sh
+%s $@
+exit $?
+""" % cc_path,
+        executable = True,
+    )
+    ###
+
+    repository_ctx.symlink(xcrunwrapper, "xcrunwrapper.sh")
+    repository_ctx.symlink(libtool, "libtool")
+    repository_ctx.symlink(make_hashed_objlist, "make_hashed_objlist.py")
+    repository_ctx.symlink(cc_toolchain_config, "cc_toolchain_config.bzl")
+    _compile_cc_file(repository_ctx, libtool_check_unique_src_path, "libtool_check_unique")
+    _compile_cc_file(repository_ctx, wrapped_clang_src_path, "wrapped_clang")
+    repository_ctx.symlink("wrapped_clang", "wrapped_clang_pp")
+    layering_check_modulemap = None
+    if repository_ctx.os.environ.get("APPLE_SUPPORT_LAYERING_CHECK_BETA") == "1":
+        layering_check_modulemap = "layering_check.modulemap"
+        _generate_system_modulemap(repository_ctx, generate_modulemap_path, layering_check_modulemap)
+        repository_ctx.file(
+            "module.modulemap",
+            "// Placeholder to satisfy API requirements. See apple_support for usage",
+        )
+
+    tool_paths = {}
+    gcov_path = repository_ctx.os.environ.get("GCOV")
+    if gcov_path != None:
+        if not gcov_path.startswith("/"):
+            gcov_path = repository_ctx.which(gcov_path)
+        tool_paths["gcov"] = gcov_path
+
+    ###
+    # mongodb customization
+    tool_paths["gcc"] = "wrapped_clang"
+    #
+
+    features = []
+    if _succeeds(repository_ctx, "ld", "-no_warn_duplicate_libraries", "-v"):
+        features.append("no_warn_duplicate_libraries")
+
+    escaped_include_paths = _get_escaped_xcode_cxx_inc_directories(repository_ctx, xcode_toolchains)
+    escaped_cxx_include_directories = []
+    for path in escaped_include_paths:
+        escaped_cxx_include_directories.append(("            \"%s\"," % path))
+    if xcodeloc_err:
+        escaped_cxx_include_directories.append("            # Error: " + xcodeloc_err)
+    repository_ctx.template(
+        "BUILD",
+        build_template,
+        {
+            "%{cxx_builtin_include_directories}": "\n".join(escaped_cxx_include_directories),
+            "%{features}": "\n".join(['"{}"'.format(x) for x in features]),
+            "%{layering_check_modulemap}": "\":{}\",".format(layering_check_modulemap) if layering_check_modulemap else "",
+            "%{placeholder_modulemap}": "\":module.modulemap\"" if layering_check_modulemap else "None",
+            "%{tool_paths_overrides}": ",\n            ".join(
+                ['"%s": "%s"' % (k, v) for k, v in tool_paths.items()],
+            ),
+        },
+    )
+
+    return True, ""
+
+######
+# mongodb customization
+# Everything below is modifications for mongodb build.
+# We are going through a transition of using the LLVM
+# clang while the Apple Clang is still the default. Once
+# the transition is completed, we will remove the Apple
+# Clang toolchain.
 
 def _get_llvm_info(repository_ctx, build_file):
     llvm_version = repository_ctx.os.environ.get("LLVM_VERSION") or ""
@@ -92,16 +373,24 @@ def _configure_oss_clang_toolchain(repository_ctx):
 
     success, llvm_path, llvm_version, error = _get_llvm_info(repository_ctx, build_file)
     if not success:
-        return False, error
+        repository_ctx.file(
+            build_file,
+            "fail(\"\"\"%s\"\"\")" % error,
+        )
+        return False
 
     success, lld_path, error = _get_lld_info(repository_ctx, llvm_version)
     if not success:
-        return False, error
+        repository_ctx.file(
+            build_file,
+            "fail(\"\"\"%s\"\"\")" % error,
+        )
+        return False
 
     include_dirs = _get_llvm_clang_include_dirs(repository_ctx, llvm_path)
 
     repository_ctx.report_progress("Generating Apple OSS LLVM Clang Toolchain build file")
-    build_template = Label("@//bazel/toolchains/cc/mongo_apple:BUILD.tmpl")
+    build_template = Label("@//bazel/toolchains/cc/mongo_apple:BUILD_llvm.tpl")
     repository_ctx.template(
         build_file,
         build_template,
@@ -114,13 +403,37 @@ def _configure_oss_clang_toolchain(repository_ctx):
 
     return True, ""
 
+def _apple_cc_autoconf_impl(repository_ctx):
+    if repository_ctx.os.name.startswith("mac os"):
+        success, error = configure_osx_toolchain(repository_ctx)
+        if not success:
+            fail("Failed to configure Apple CC toolchain, if you only have the command line tools installed and not Xcode, you cannot use this toolchain. You should either remove it or temporarily set '{}=1' in the environment: {}".format(_DISABLE_ENV_VAR, error))
+    else:
+        repository_ctx.file("BUILD", "# Apple CC autoconfiguration was disabled because you're not on macOS")
+
+mongo_apple_toolchain_config = repository_rule(
+    environ = [
+        _DISABLE_ENV_VAR,
+        _OLD_DISABLE_ENV_VAR,
+        "APPLE_SUPPORT_LAYERING_CHECK_BETA",
+        "BAZEL_ALLOW_NON_APPLICATIONS_XCODE",  # Signals to configure_osx_toolchain that some Xcodes may live outside of /Applications and we need to probe further when detecting/configuring them.
+        "DEVELOPER_DIR",  # Used for making sure we use the right Xcode for compiling toolchain binaries
+        "GCOV",  # TODO: Remove this
+        "USE_CLANG_CL",  # Kept as a hack for those who rely on this invaliding the toolchain
+        "USER",  # Used to allow paths for custom toolchains to be used by C* compiles
+        "XCODE_VERSION",  # Force re-computing the toolchain by including the current Xcode version info in an env var
+        "LLVM_PATH",  # Force re-compute if the user changed the location of the LLVM toolchain
+        "LLVM_VERSION",  # Force re-compute if the user changed the version of the LLVM toolchain
+    ],
+    implementation = _apple_cc_autoconf_impl,
+    configure = True,
+)
+
 def _apple_llvm_clang_cc_autoconf_impl(repository_ctx):
     """Configures the Apple LLVM Clang toolchain."""
     if repository_ctx.os.name.startswith("mac os"):
         # No failure is shown to the user as the toolchain is still being worked on it.
-        success, error_msg = _configure_oss_clang_toolchain(repository_ctx)
-        if not success:
-            fail(error_msg)
+        _configure_oss_clang_toolchain(repository_ctx)
     else:
         repository_ctx.file("BUILD", "# Apple OSS LLVM Clang autoconfiguration was disabled because you're not on macOS")
 
@@ -151,11 +464,24 @@ def get_supported_apple_archs():
                 supported_archs[arch] = cpu
     return supported_archs
 
-def setup_mongo_apple_toolchain():
-    mongo_apple_brew_llvm_toolchain_config(
-        name = "mongo_apple_toolchain",
+def _toolchain_setup(ctx):
+    ctx.template(
+        "BUILD.bazel",
+        ctx.attr.build_tpl,
     )
 
-setup_mongo_apple_toolchain_extension = module_extension(
-    implementation = lambda ctx: setup_mongo_apple_toolchain(),
+    return None
+
+mongo_apple_toolchain_setup = repository_rule(
+    implementation = _toolchain_setup,
+    attrs = {
+        "arch": attr.string(
+            values = ["amd64", "aarch64", "amd64", "x86_64", "ppc64le", "s390x"],
+            doc = "Host architecture.",
+        ),
+        "build_tpl": attr.label(
+            default = "//bazel/toolchains/cc/mongo_apple:mongo_apple_toolchain.BUILD.tmpl",
+            doc = "Label denoting the BUILD file template that get's installed in the repo.",
+        ),
+    },
 )
diff --git a/tools/bazel b/tools/bazel
index 9cb423d8e77..b76a496c6bd 100755
--- a/tools/bazel
+++ b/tools/bazel
@@ -8,6 +8,7 @@
 
 REPO_ROOT=$(dirname $(dirname $(realpath "$0")))
 bazel_real="$BAZEL_REAL"
+bazelrc_xcode_lines=()
 
 
 
@@ -52,6 +53,20 @@ if [[ -z "${BAZELISK_SKIP_WRAPPER}" ]]; then
     exit 0
 fi
 
+if [[ $OSTYPE == darwin* ]]; then
+  echo "Running on Apple (darwin), creating .bazelrc for xcode settings." >&2
+  xcode_path=$(xcode-select -p) >&2
+  xcode_version=$(xcodebuild -version | tail -1 | cut -d " " -f3) >&2
+  xcode_build_number=$(/usr/bin/xcodebuild -version 2>/dev/null | tail -1 | cut -d " " -f3) >&2
+
+  bazelrc_lines+=("startup --host_jvm_args=-Xdock:name=$xcode_path") >&2
+  bazelrc_lines+=("common --xcode_version=$xcode_version") >&2
+  bazelrc_lines+=("common --repo_env=USE_CLANG_CL=$xcode_version") >&2
+  bazelrc_lines+=("common --repo_env=DEVELOPER_DIR=$xcode_path") >&2
+fi
+
+printf '%s\n' "${bazelrc_xcode_lines[@]}" > $REPO_ROOT/.bazelrc.xcode
+
 echo "common --//bazel/config:running_through_bazelisk" > $REPO_ROOT/.bazelrc.bazelisk
 
 if [[ $MONGO_BAZEL_WRAPPER_DEBUG == 1 ]]; then
