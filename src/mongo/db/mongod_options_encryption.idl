# This file is part of Percona Server for MongoDB.
#
# Copyright (C) 2018-present Percona and/or its affiliates. All rights reserved.
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the Server Side Public License, version 1,
#    as published by MongoDB, Inc.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    Server Side Public License for more details.
#
#    You should have received a copy of the Server Side Public License
#    along with this program. If not, see
#    <http://www.mongodb.com/licensing/server-side-public-license>.
#
#    As a special exception, the copyright holders give permission to link the
#    code of portions of this program with the OpenSSL library under certain
#    conditions as described in each individual source file and distribute
#    linked combinations including the program with the OpenSSL library. You
#    must comply with the Server Side Public License in all respects for
#    all of the code used other than as permitted herein. If you modify file(s)
#    with this exception, you may extend this exception to your version of the
#    file(s), but you are not obligated to do so. If you do not wish to do so,
#    delete this exception statement from your version. If you delete this
#    exception statement from all source files in the program, then also delete
#    it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/mongod_options_encryption.h"
    configs:
        section: 'Encryption options'
        source: [ yaml, cli ]
        initializer:
            register: addMongodEncryptionOptions

configs:
    'security.enableEncryption':
        description: 'Enable encryption for the WiredTiger storage engine'
        short_name: enableEncryption
        arg_vartype: Switch

    'security.encryptionCipherMode':
        description: 'The cipher mode to use for encryption at rest'
        short_name: encryptionCipherMode
        arg_vartype: String
        requires: 'security.enableEncryption'
        validator:
            callback: validateEncryptionCipherModeSetting

    'security.encryptionKeyFile':
        description: 'The path to the local keyfile'
        short_name: encryptionKeyFile
        arg_vartype: String
        requires: 'security.enableEncryption'
        conflicts: ['security.vault.serverName', 'security.kmip.serverName']

    'security.vault.serverName':
        description: 'Hostname or IP address of the Vault server'
        short_name: vaultServerName
        arg_vartype: String
        requires: [ 'security.enableEncryption', 'security.vault.port', 'security.vault.tokenFile']
        conflicts: ['security.encryptionKeyFile', 'security.kmip.serverName']

    'security.vault.port':
        description: 'Port name the Vault server is listening on'
        short_name: vaultPort
        arg_vartype: Int
        requires: 'security.vault.serverName'
        validator:
            gte: 0
            lte: 65535

    'security.vault.tokenFile':
        description: "The path to file with Vault server's access token"
        short_name: vaultTokenFile
        arg_vartype: String
        requires: 'security.vault.serverName'

    'security.vault.secret':
        description: 'The name of the Vault secret where the master key is stored'
        short_name: vaultSecret
        arg_vartype: String
        requires: 'security.vault.serverName'

    'security.vault.secretVersion':
        description: >-
            The version of the Vault secret where the master key is stored.
            Zero means the most recent version.
        short_name: vaultSecretVersion
        arg_vartype: UnsignedLongLong
        requires: 'security.vault.secret'

    'security.vault.rotateMasterKey':
        description: 'Rotate master key and re-encrypt keys db'
        short_name: vaultRotateMasterKey
        arg_vartype: Switch
        requires: 'security.vault.serverName'

    'security.vault.serverCAFile':
        description: >-
            CA certificate that was used to sign Vault's certificates
            - should be used when the Vault's CA certificate is not trusted
            by the machine that is going to connect to the Vault server
        short_name: vaultServerCAFile
        arg_vartype: String
        requires: 'security.vault.serverName'

    'security.vault.disableTLSForTesting':
        description: >-
            Disable using TLS for Vault server connections
            - is suitable for connecting Vault server in -dev mode or
            Vault server with TLS disabled. Should not be used in production
        short_name: vaultDisableTLSForTesting
        arg_vartype: Switch
        requires: 'security.vault.serverName'

    'security.kmip.serverName':
        description: >-
            Hostname or IP address of the KMIP server. It may also be a
            comma-separated list of hostnames or IP addresses in which case
            they are tried one-by-one until a connection is successfully
            established. The value of the `security.kmip.port` configuration
            parameter is used as a port number for each hostname or
            IP address.
        short_name: kmipServerName
        arg_vartype: String
        requires: [ 'security.enableEncryption', 'security.kmip.clientCertificateFile']
        conflicts: ['security.encryptionKeyFile', 'security.vault.serverName']

    'security.kmip.port':
        description: 'Port number the KMIP server is listening on, default is 5696'
        short_name: kmipPort
        arg_vartype: Int
        requires: 'security.kmip.serverName'
        validator:
            gte: 0
            lte: 65535

    'security.kmip.serverCAFile':
        description: >-
            CA certificate that was used to sign KMIP server's certificates
            - should be used when the KMIP server's CA certificate is not
            trusted by the machine that is going to connect to the KMIP server
        short_name: kmipServerCAFile
        arg_vartype: String
        requires: 'security.kmip.serverName'

    'security.kmip.clientCertificateFile':
        description: 'Path to the PEM file with KMIP client private key and certificate chain'
        short_name: kmipClientCertificateFile
        arg_vartype: String
        requires: 'security.kmip.serverName'

    'security.kmip.clientCertificatePassword':
        description: >-
            Password for the KMIP client private key or/and certificate.
            Should be used only if either the private key or certificate
            is encrypted.
        short_name: kmipClientCertificatePassword
        arg_vartype: String
        requires: 'security.kmip.clientCertificateFile'

    'security.kmip.connectRetries':
        description: >-
            Number times `mongod` retries to get a response from a KMIP server.
            Maximum number of tries per each KMIP server equals to
            `connectRetries + 1`.  Use together with `connectTimeoutMS` to
            control how long the `mongod` waits for a response between each
            retry.
        short_name: kmipConnectRetries
        arg_vartype: Int
        requires: 'security.kmip.serverName'
        validator:
            gte: 0

    'security.kmip.connectTimeoutMS':
        description: >-
            Timeout in milliseconds to wait for a response from the KMIP server.
            If the `connectRetries` setting is specified, the `mongod` will wait
            up to the value specified with `connectTimeoutMS` for each retry.
        short_name: kmipConnectTimeoutMS
        arg_vartype: Int
        requires: 'security.kmip.serverName'
        validator:
            gte: 1000

    'security.kmip.keyIdentifier':
        description: 'Name of the KMIP key to use'
        short_name: kmipKeyIdentifier
        arg_vartype: String
        requires: 'security.kmip.serverName'

    'security.kmip.rotateMasterKey':
        description: 'Rotate master key and re-encrypt key db'
        short_name: kmipRotateMasterKey
        arg_vartype: Switch
        requires: 'security.kmip.serverName'

    'security.kmip.activateKeys':
        description: >-
            Activates all new KMIP keys upon registering them on a KMIP server.
            When the option is `true` and `mongod` starts with a predefined
            (in its metadata or configuration file) key identifier, the key
            must be activated first or the `mongod` node will fail to start.
            To ensure you have an active key, rotate the KMIP master key
            by using `security.kmip.rotateMasterKey`. During rotation, the old
            master key does not need to be active.
            See `security.kmip.keyStatePollingSeconds` for key state polling.
            Default: `true`
        short_name: kmipActivateKeys
        arg_vartype: Switch
        requires: 'security.kmip.serverName'

    'security.kmip.keyStatePollingSeconds':
        description: >-
            Time interval in seconds with which `mongod` polls the KMIP
            server in order to verify that the master encryption key is
            in the active state. If `mongod` detects the key has transitioned
            into a non-active state, it shuts down.
            Polling works only if `security.kmip.activateKeys` is `true`. To
            disable polling separately while keeping key activation enabled,
            set the option to any non-positive value.
            Default: 900
        short_name: kmipKeyStatePollingSeconds
        arg_vartype: Int
        requires: 'security.kmip.serverName'
